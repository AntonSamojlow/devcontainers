# workflow that builds the linux-dev image and uploads it to some container registry

name: Publish image
on:
  workflow_dispatch:
    inputs:
      image:
        description: "Dockerfile to build and push"
        required: true
        type: choice
        options:
          # we require images to be organized under ./{repository}/{imagename}.Dockerfile
          - "cpp/linux-dev"
      tag:
        description: "Tag for the image"
        required: true
        type: string
        default: latest

env:
  GC_PROJECT_NUMBER: 73958267942
  GC_POOL_ID: identity-pool-alpha
  GC_PROVIDER_ID: github-actions
  GC_SERVICE_ACCOUNT_EMAIL: github-actions-devcontainers@general-396516.iam.gserviceaccount.com
  GAR_LOCATION: "europe-west3"
  GAR_PROJECT: "devcontainers-396515"

jobs:
  build:
    name: Build & push docker image
    runs-on: ubuntu-latest
    permissions:
      id-token: "write"
      contents: "read"

    steps:
      - uses: "actions/checkout@v3"

      - name: Save image tag
        run: echo "IMAGE_AND_TAG=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GAR_PROJECT}}/${{ inputs.image }}:${{ inputs.tag }}" >> $GITHUB_ENV

      - id: "auth"
        name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@v1.1.0"
        with:
          token_format: "access_token"
          create_credentials_file: true
          workload_identity_provider: "projects/${{ env.GC_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/${{ env.GC_POOL_ID }}/providers/${{ env.GC_PROVIDER_ID }}"
          service_account: ${{ env.GC_SERVICE_ACCOUNT_EMAIL }}

      - id: "login"
        name: Login to GAR
        uses: docker/login-action@v2
        with:
          registry: ${{ env.GAR_LOCATION }}-docker.pkg.dev
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}

      - name: Docker build
        shell: pwsh
        run: >
          docker build
          --file ${{ inputs.image }}.Dockerfile
          --tag ${{ env.IMAGE_AND_TAG }}
          (Split-Path ${{ inputs.image }}.Dockerfile -Parent)

      - name: Docker push
        shell: pwsh
        run: docker push ${{ env.IMAGE_AND_TAG }}
