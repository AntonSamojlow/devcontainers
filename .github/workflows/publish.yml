# workflow that builds the linux-dev image and uploads it to some container registry

name: Publish image
on:
  workflow_dispatch:
    inputs:
      image:
        description: "Dockerfile to build and push"
        required: true
        type: choice
        options:
        # we require images ti be organized under ./{repository}/{imagename}.Dockerfile
          - "cpp/linux-dev"
      tag:
        description: "Tag for the image"
        required: true
        type: string
        default: latest

env:
  GAR_LOCATION: "europe-west3"
  GAR_PROJECT: "devcontainers-396515"
  GCLOUD_SERVICE_ACCOUNT: "github-workflows"
  GCLOUD_WORKLOAD_ID_PROVIDER: "projects/1070825474922/locations/global/workloadIdentityPools/github-id-pool/providers/github-id-pool-provider"

jobs:
  build:
    name: Build & push docker image
    runs-on: ubuntu-latest
    permissions:
      contents: "read"
      id-token: "write"
    steps:
      - uses: "actions/checkout@v3"

      - name: Save image tag
        run: echo "IMAGE_AND_TAG=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GAR_PROJECT}}/${{ inputs.image }}:${{ inputs.tag }}" >> $GITHUB_ENV

      - id: "auth"
        name: Authenticate to Google Cloud
        uses: "google-github-actions/auth@v1.1.0"
        with:
          token_format: "access_token"
          workload_identity_provider: ${{ env.GCLOUD_WORKLOAD_ID_PROVIDER }}
          service_account: ${{ env.GCLOUD_SERVICE_ACCOUNT }}@${{ env.GAR_PROJECT }}.iam.gserviceaccount.com
          access_token_lifetime: 3600s

      - id: "login"
        name: Login to GAR
        uses: docker/login-action@v2
        with:
          registry: ${{ env.GAR_LOCATION }}-docker.pkg.dev
          username: "oauth2accesstoken"
          password: "${{ steps.auth.outputs.access_token }}"

      - name: Docker build
        shell: pwsh
        run: >
          docker build
          --file ${{ inputs.image }}.Dockerfile
          --tag ${{ env.IMAGE_AND_TAG }}
          (Split-Path ${{ inputs.image }}.Dockerfile -Parent)

      - name: Docker push
        shell: pwsh
        run: docker push ${{ env.IMAGE_AND_TAG }}
